<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.multipjt.multi_pjt.community.dao.UserActivityMapper">

   

   <!-- 좋아요 확인 EXISTS - boolean 값 반환-->
   <select id="commitLike" parameterType="java.util.HashMap" resultType="Boolean">
        SELECT EXISTS (
            SELECT 1
            FROM UserActivity
            WHERE post_id = #{post_id}
            AND member_id = #{member_id}
            AND user_activity = 'like'
        ) As existsLike
    </select>

    <!-- 좋아요 테이블에 넣기 -->
    <insert id="likeACInsert" parameterType="java.util.HashMap" >
        INSERT INTO UserActivity (user_activity,  post_id, member_id)
        VALUES('like', #{post_id}, #{member_id});
    </insert>

    <!-- 좋아요 테이블에서 삭제 -->
    <delete id="likeACDelete"   parameterType="java.util.HashMap" >
        DELETE FROM UserActivity
        WHERE 
            post_id = #{post_id}
        AND 
            member_id = #{member_id}
        AND 
            user_activity = 'like'    
    </delete>

    <!-- 좋아요 수 가져오기 -->
    <select id="likeCount" parameterType="java.util.HashMap">
        SELECT post_like_counts 
        FROM Posts
        WHERE 
            post_id = #{post_id}
    </select>

    <!-- 좋아요 수 변경 -->
    <update id="postLikeCountUpdate" parameterType="java.util.HashMap">
        UPDATE Posts
        SET 
            post_like_counts = #{post_like_counts}
        WHERE
            post_id = #{post_id}
    </update>

    <!-- 조회수 수 가져오기 -->
    <select id="viewCount" parameterType="java.util.HashMap">
        SELECT post_views 
        FROM Posts
        WHERE 
            post_id = #{post_id}
    </select>

    <!-- 조회수 +1 -->
    <update id="postViewCountAdd" parameterType="java.util.HashMap">
        UPDATE Posts
        SET 
            post_views = #{post_views}
        WHERE
            post_id = #{post_id}
    </update>

    <!-- 조회 테이블에 넣기 -->
    <insert id="postViewInsert" parameterType="java.util.HashMap" >
        INSERT INTO UserActivity (user_activity,  post_id, member_id)
        VALUES('view', #{post_id}, #{member_id});
    </insert>

    <!-- 조회 Insert EXISTS - boolean 값 반환-->
    <select id="commitView" parameterType="com.multipjt.multi_pjt.community.domain.UserActivity.UserActivityRequestDTO" resultType="Boolean">
        SELECT EXISTS (
            SELECT 1
            FROM UserActivity
            WHERE post_id = #{post_id}
            AND member_id = #{member_id}
            AND user_activity = 'view'
        ) As existsView
    </select>

    <!-- 싫어요 확인 EXISTS - boolean 값 반환-->
   <select id="commitUnLike" parameterType="java.util.HashMap" resultType="Boolean">
        SELECT EXISTS (
            SELECT 1
            FROM UserActivity
            WHERE post_id = #{post_id}
            AND member_id = #{member_id}
            AND user_activity = 'unlike'
        ) As existsLike
    </select>
   
    <!-- 싫어요 수 조회-->
    <select id="unLikeCount" parameterType="java.util.HashMap">
        SELECT post_unlike_counts 
        FROM Posts
        WHERE 
            post_id = #{post_id}
    </select>


       <!-- 싫어요 수 변경 -->
    <update id="postUnLikeCountUpdate" parameterType="java.util.HashMap">
        UPDATE Posts
        SET 
            post_unlike_counts = #{post_unlike_counts}
        WHERE
            post_id = #{post_id}
    </update>


    <!-- 싫어요를 테이블에 넣기 -->
    <insert id="unLikeACInsert" parameterType="java.util.HashMap" >
        INSERT INTO UserActivity (user_activity,  post_id, member_id)
        VALUES('unlike', #{post_id}, #{member_id});
    </insert>

    <!-- 싫어요를 테이블에서 삭제 -->
    <delete id="unLikeACDelete"   parameterType="java.util.HashMap" >
        DELETE FROM UserActivity
        WHERE 
            post_id = #{post_id}
        AND 
            member_id = #{member_id}
        AND 
            user_activity = 'unlike'    
    </delete>

</mapper>