<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.multipjt.multi_pjt.community.dao.PostMapper">

    <!-- 게시물 등록 -->
    <insert id="postInsert"  parameterType="com.multipjt.multi_pjt.community.domain.posts.PostRequestDTO">
        INSERT INTO Posts (
            post_title,
            post_contents,
            post_up_sport,
            post_sport,
            post_sports_keyword,
            member_id
            <if test="post_hashtag != null and post_hashtag != ''">
                , post_hashtag
            </if>
            <if test="post_img1 != null and post_img1 != ''">
                , post_img1
            </if>
            <if test="post_img2 != null and post_img2 != ''">
                , post_img2
            </if>
          
        ) VALUES (
            #{post_title},
            #{post_contents},
            #{post_up_sport},
            #{post_sport},
            #{post_sports_keyword},
            #{member_id}
            <if test="post_hashtag != null and post_hashtag != ''">
                , #{post_hashtag}
            </if>
            <if test="post_img1 != null and post_img1 != ''">
                , #{post_img1}
            </if>
            <if test="post_img2 != null and post_img2 != ''">
                , #{post_img2}
            </if>
        );
    </insert>

    <!-- 게시글 member_id로 조회 -->
    <select id ="getMemberById" parameterType="int"  resultType="com.multipjt.multi_pjt.community.domain.posts.PostResponseDTO">
        SELECT * 
        FROM Posts 
        WHERE member_id= #{member_id}
    </select>

    <!-- 게시글 수정 -->
    <update id="postUpdate" parameterType="com.multipjt.multi_pjt.community.domain.posts.PostRequestDTO" >  
        UPDATE Posts
        SET  
            <if test="post_title != null and post_title != ''">
                post_title = #{post_title}
            </if>
            <if test="post_contents != null and post_contents != ''">
                , post_contents = #{post_contents}
            </if>
             <if test="post_up_sport != null and post_up_sport != ''">
                , post_up_sport = #{post_up_sport}
            </if>
            <if test="post_sport != null and post_sport != ''">
                , post_sport = #{post_sport}
            </if>
            <if test="post_sports_keyword != null and post_sports_keyword != ''">
                , post_sports_keyword = #{post_sports_keyword}
            </if>
            <if test="post_img1 != null and post_img1 != ''">
                , post_img1 = #{post_img1}
            </if>
            <if test="post_img2 != null and post_img2 != ''">
                , post_img2 = #{post_img2}
            </if>
             <if test="post_hashtag != null and post_hashtag != ''">
                , post_hashtag = #{post_hashtag}
            </if>
            , post_modify_date = now()
        WHERE
            post_id = #{post_id} 
            AND    member_id = #{member_id} 
    </update>
    <!-- 수정된 게시글 조회 -->
    <select id="updatePostResult" 
            parameterType="com.multipjt.multi_pjt.community.domain.posts.PostRequestDTO" 
            resultType="com.multipjt.multi_pjt.community.domain.posts.PostResponseDTO"
        >
        SELECT 
            p.post_id AS post_id, 
            p.post_title AS post_title, 
            p.post_contents AS post_contents, 
            p.post_sport AS post_sport, 
            p.post_up_sport AS post_up_sport, 
            p.post_sports_keyword AS post_sports_keyword, 
            p.post_date AS post_date, 
            p.post_modify_date AS post_modify_date, 
            p.post_hashtag AS post_hashtag,
            p.post_like_counts AS post_like_counts, 
            p.post_unlike_counts AS post_unlike_counts, 
            p.post_views AS post_views, 
            p.post_img1 AS post_img1,
            p.post_img2 AS post_img2,
            m.nickname AS post_nickname,  
            m.member_id AS member_id,
            COUNT(c.comments_id) AS comments_count  
        FROM 
            Posts p
        LEFT JOIN
            Comments c 
        ON 
            p.post_id = c.post_id 
        LEFT JOIN 
            Member m ON p.member_id = m.member_id    
        WHERE 
            p.post_id = #{post_id} 
        ORDER BY 
            p.post_date DESC

    </select>


    <!-- 게시글 삭제 -->
    <delete id="postDelete" parameterType="java.util.HashMap">
        delete from Posts
        WHERE 
            post_id = #{post_id}
        AND 
            member_id=#{member_id}
    </delete>
    <!-- post_id로 게시글 조회 -->
    <select id ="getPostById" parameterType="int"  resultType="com.multipjt.multi_pjt.community.domain.posts.PostResponseDTO">
        SELECT * 
        FROM Posts 
        WHERE post_id= #{post_id}
    </select>


    <!-- 게시글 검색  제목/내용/해시태그 -->
    <select id="postSelectTCH" parameterType="java.util.HashMap" 
            resultType="com.multipjt.multi_pjt.community.domain.posts.PostResponseDTO">
        SELECT @rownum := @rownum +1 As rownum, search_keyword.* 
        From(SELECT 
            p.post_id,
            post_title,
            post_contents,
            post_sport,
            post_sports_keyword,
            post_like_counts,
            post_views,
            p.member_id,
            m.nickname AS post_nickname,
            post_date,
            COUNT(c.comments_id) AS comments_count
        FROM
            Posts p
        INNER JOIN
            Member m
        ON
            p.member_id = m.member_id
        LEFT JOIN
            Comments c 
        ON 
            p.post_id = c.post_id
        WHERE
            post_title LIKE CONCAT( '%', #{keyword}, '%' )
            OR
            post_contents LIKE CONCAT( '%', #{keyword}, '%' )
            OR
            post_hashtag LIKE CONCAT( '%', #{keyword}, '%' )
        GROUP BY
            p.post_id 
        ORDER BY 
            p.post_date DESC
        LIMIT #{size} OFFSET #{offset}) AS search_keyword, (SELECT @rownum := 0 )r
    </select>

    <!-- 전체 게시글 조회 -->
    <select id="postAllSelect" parameterType="java.util.HashMap"  resultType="com.multipjt.multi_pjt.community.domain.posts.PostResponseDTO">
        SELECT @rownum := @rownum +1 As rownum, Posts.* 
        From(SELECT 
            p.post_id AS post_id,
            p.post_title AS post_title,
            p.post_sport AS post_sport,
            p.post_date AS post_date,
            p.post_up_sport AS post_up_sport,
            p.post_sports_keyword AS sport_keyword,
            p.post_like_counts AS post_like_counts,
            p.post_views AS post_views,
            COUNT(c.comments_id) AS comments_count,
            m.nickname AS post_nickname,
            m.member_id AS member_id
        FROM 
            Posts p
        LEFT JOIN 
            Comments c ON p.post_id = c.post_id
        JOIN 
            Member m ON p.member_id = m.member_id
        WHERE
            1=1
        <if test="post_up_sport != null and post_up_sport != ''">
            AND p.post_up_sport = #{post_up_sport}
        </if>
        <if test="post_sport != null and post_sport != ''">
            AND p.post_sport = #{post_sport}
        </if> 
        GROUP BY 
            p.post_id, p.post_title, p.post_sport, p.post_sports_keyword, p.post_date, p.post_up_sport,
            p.post_like_counts, p.post_views, m.nickname, m.member_id
        ORDER BY 
            p.post_date DESC
        LIMIT #{size} OFFSET #{offset}) Posts, (SELECT @rownum := 0 )r
    </select> 

    <!-- 전체 게시글 수 -->
    <select id="countPosts" parameterType="java.util.HashMap" resultType="int">
        SELECT COUNT(*)
        FROM Posts p
        WHERE 1=1
            <if test="post_up_sport != null">
                AND p.post_up_sport= #{post_up_sport}
            </if>
            <if test="post_sport != null">
                AND p.post_sport = #{post_sport}
            </if> 

    </select>

   <!-- 상세 게시글 -->
    <select id="postDetailSelect" parameterType="java.util.HashMap" 
            resultType="com.multipjt.multi_pjt.community.domain.posts.PostResponseDTO">
        SELECT 
            p.post_id AS post_id, 
            p.post_title AS post_title, 
            p.post_contents AS post_contents, 
            p.post_sport AS post_sport, 
            p.post_up_sport AS post_up_sport, 
            p.post_sports_keyword AS post_sports_keyword, 
            p.post_date AS post_date, 
            p.post_modify_date AS post_modify_date, 
            p.post_hashtag AS post_hashtag,
            p.post_like_counts AS post_like_counts, 
            p.post_unlike_counts AS post_unlike_counts, 
            p.post_views AS post_views, 
            p.post_img1 AS post_img1,
            p.post_img2 AS post_img2,
            m.nickname AS post_nickname,  
            m.member_id AS member_id,
            COUNT(c.comments_id) AS comments_count  
        FROM 
            Posts p
        LEFT JOIN
            Comments c 
        ON 
            p.post_id = c.post_id 
        LEFT JOIN 
            Member m ON p.member_id = m.member_id    
        WHERE 
            p.post_id = #{post_id} 
        ORDER BY 
            p.post_date DESC
    </select>

    <!-- 댓글 조회 -->
    <select id="postDetailComment" 
            parameterType="java.util.HashMap" 
            resultType="com.multipjt.multi_pjt.community.domain.comments.CommentResponseDTO">
        SELECT  c.comments_id, 
                c.comments_contents, 
                c.comments_date,
                c.post_id,
                m.member_id, 
                m.nickname AS c_nickname
        FROM    
            Comments c
        Join 
            Member m ON c.member_id = m.member_id
        WHERE
            c.post_id = #{post_id}
    </select>


    <!-- 비회원 추천 -->
    <select id="nonMemberRCPost" resultType="com.multipjt.multi_pjt.community.domain.posts.PostResponseDTO">
        SELECT 
            p.post_title AS post_title,
            p.post_sport AS post_sport,
            p.post_date AS post_date,
            p.post_sports_keyword AS sport_keyword,
            p.post_like_counts AS post_like_count,
            p.post_views AS post_views,
            COUNT(c.comments_id) AS comments_count,
            m.nickname AS post_nickname,
            m.member_id AS member_id,
            (p.post_like_counts*1.0 + post_views*0.5) AS score
        FROM 
            Posts p
        LEFT JOIN 
            Comments c ON p.post_id = c.post_id
        JOIN 
            Member m ON p.member_id = m.member_id
        GROUP BY 
            p.post_id, p.post_title, p.post_sport, p.post_sports_keyword, p.post_date, 
            p.post_like_counts, p.post_views, m.nickname, m.member_id
        ORDER BY score DESC    
        LIMIT 5    
    </select>



    <!-- 회원 가입 / 활동 없는 회원 추천 -->
        <select id="newMemberRCPost" parameterType="int"
                resultType="com.multipjt.multi_pjt.community.domain.posts.PostResponseDTO">
            SELECT 
                p.post_title AS post_title,
                p.post_sport AS post_sport,
                p.post_date AS post_date,
                p.post_sports_keyword AS sport_keyword,
                p.post_like_counts AS post_like_count,
                p.post_views AS post_views,
                COUNT(c.comments_id) AS comments_count,
                m.nickname AS post_nickname,
                m.member_id AS member_id,
                ((p.post_like_counts * 1.0 + p.post_views * 0.5) *
                    CASE 
                        WHEN p.post_sport = pro.profile_sport1 THEN 0.7
                        WHEN p.post_sport = pro.profile_sport2 THEN 0.2
                        WHEN p.post_sport = pro.profile_sport3 THEN 0.1
                        ELSE 0
                    END
                ) AS score
            FROM 
                Posts p
            LEFT JOIN 
                Comments c ON p.post_id = c.post_id
            JOIN 
                Member m ON p.member_id = m.member_id
            WHERE 
                p.post_sport IN(
                    SELECT profile_sport1 FROM UserProfile WHERE member_id = #{member_id}
                    UNION
                    SELECT profile_sport2 FROM UserProfile WHERE member_id = #{member_id}
                    UNION
                    SELECT profile_sport3 FROM UserProfile WHERE member_id = #{member_id}   
                )            
            GROUP BY 
                p.post_id, p.post_title, p.post_sport, p.post_sports_keyword, p.post_date, 
                p.post_like_counts, p.post_views, m.nickname, m.member_id
            ORDER BY 
                    score DESC 
            LIMIT 5
    </select>

    <!-- 회원 가입 / 활동 없는 회원 판단 -->
    <select id="isNewMember" parameterType="int" resultType="int">
        <![CDATA[
            SELECT COUNT(*)
            FROM Member m
            LEFT JOIN UserActivity ua ON m.member_id = ua.member_id
            WHERE m.member_id = #{member_id}
                AND (m.regdate = CURDATE() 
                    OR (ua.activity_date <= DATE_SUB(CURDATE(), INTERVAL 7 DAY) 
                        OR ua.activity_date IS NULL))

        ]]>
    </select>

    <!-- 활동중인 회원 키워드 -->
    <select id="exMemberData" parameterType="int" resultType="com.multipjt.multi_pjt.community.domain.posts.PostResponseDTO">
        <![CDATA[
            SELECT post_sport, post_sports_keyword, total_score
            FROM (
                SELECT p.post_sport, p.post_sports_keyword,
                    SUM(CASE WHEN ua.user_activity = 'like' THEN 1 ELSE 0 END) * 1.0 AS like_score,
                    SUM(CASE WHEN ua.user_activity = 'view' THEN 1 ELSE 0 END) * 0.5 AS view_score,
                    (SUM(CASE WHEN ua.user_activity = 'like' THEN 1 ELSE 0 END) * 1.0 + 
                    SUM(CASE WHEN ua.user_activity = 'view' THEN 1 ELSE 0 END) * 0.5) * 1.0 AS total_score
                FROM UserActivity ua
                JOIN Posts p 
                    ON ua.post_id = p.post_id
                WHERE 
                    ua.member_id = #{member_id}
                    AND 
                        ua.activity_date >= DATE_SUB(CURDATE(), INTERVAL 2 DAY)
                GROUP BY p.post_sport, p.post_sports_keyword

                UNION ALL 

                SELECT p.post_sport, p.post_sports_keyword,
                    SUM(CASE WHEN ua.user_activity = 'like' THEN 1 ELSE 0 END) * 1.0 AS like_score,
                    SUM(CASE WHEN ua.user_activity = 'view' THEN 1 ELSE 0 END) * 0.5 AS view_score,
                    (SUM(CASE WHEN ua.user_activity = 'like' THEN 1 ELSE 0 END) * 1.0 + 
                    SUM(CASE WHEN ua.user_activity = 'view' THEN 1 ELSE 0 END) * 0.5 ) * 0.7 AS total_score
                FROM UserActivity ua
                JOIN Posts p 
                    ON ua.post_id = p.post_id
                WHERE 
                    ua.member_id = #{member_id}
                    AND
                        ua.activity_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY)
                    AND
                        ua.activity_date < DATE_SUB(CURDATE(), INTERVAL 2 DAY)
                GROUP BY p.post_sport, p.post_sports_keyword                
                ) AS RankResult
            ORDER BY total_score DESC
            LIMIT 6
        ]]>
    </select>

    <select id="findRCPosts" parameterType="java.util.Map" resultType="com.multipjt.multi_pjt.community.domain.posts.PostResponseDTO">   
        SELECT 
            p.post_id AS post_id,
            p.post_title AS post_title,
            p.post_sport AS post_sport,
            p.post_date AS post_date,
            p.post_sports_keyword AS post_sports_keyword,
            p.post_like_counts AS post_like_counts,
            p.post_views AS post_views,
            COUNT(c.comments_id) AS comments_count,
            m.nickname AS post_nickname,
            m.member_id AS member_id,
            (p.post_like_counts*1.0 + post_views*0.5) AS score
        FROM 
            Posts p
        LEFT JOIN 
            Comments c ON p.post_id = c.post_id
        JOIN 
            Member m ON p.member_id = m.member_id
        WHERE 
            p.post_sport = #{postSport} 
        AND 
            post_sports_keyword = #{postSportsKeyword}
        GROUP BY 
            p.post_id, p.post_title, p.post_sport, p.post_sports_keyword, p.post_date, 
            p.post_like_counts, p.post_views, m.nickname, m.member_id
        ORDER BY score DESC    
        LIMIT 
            #{slimit}  
    </select>

    <!-- 키워드 검색 -->
    <select id="searchKeyword" parameterType="java.util.HashMap" resultType="com.multipjt.multi_pjt.community.domain.posts.PostResponseDTO">
    SELECT @rownum := @rownum +1 As rownum, Posts.* 
        From(SELECT 
            p.post_id AS post_id,
            p.post_title AS post_title,
            p.post_sport AS post_sport,
            p.post_date AS post_date,
            p.post_up_sport AS post_up_sport,
            p.post_sports_keyword AS sport_keyword,
            p.post_like_counts AS post_like_count,
            p.post_views AS post_views,
            COUNT(c.comments_id) AS comments_count,
            m.nickname AS post_nickname,
            m.member_id AS member_id
        FROM 
            Posts p
        LEFT JOIN 
            Comments c ON p.post_id = c.post_id
        JOIN 
            Member m ON p.member_id = m.member_id
        WHERE 
            p.post_up_sport = #{post_up_sport}
        AND 
            p.post_sport = #{post_sport}
        And 
             p.post_sports_keyword = #{post_sports_keyword}
        GROUP BY 
            p.post_id, p.post_title, p.post_sport, p.post_sports_keyword, p.post_date, p.post_up_sport,
            p.post_like_counts, p.post_views, m.nickname, m.member_id
        ORDER BY 
            p.post_date DESC
        LIMIT #{size} OFFSET #{offset}) Posts, (SELECT @rownum := 0 )r
    
    </select>
</mapper>